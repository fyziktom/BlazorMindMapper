@using Markdig
@using BlazorPanzoom;

@inject MindMapperService mindMapper
@inject HttpClient Http

<Div Class="panzoom-parent">
    <Panzoom @ref="_panzoom" WheelMode="@(WheelMode.Custom)" OnWheel="@OnWheel">
        <div @ref="@context.ElementReference" class="panzoom" style="width: 100%; min-width:@(InitWidth)px; min-height: @(InitHeight)px; height: 100%; margin: 0 auto;">
            @((MarkupString)NFTTextMarkuptext)
        </div>
    </Panzoom>
</Div>

@code {
    [Inject] protected IJSRuntime? JS { get; set; } = null;

    [Parameter] public string Source { get; set; } = string.Empty;
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public int InitWidth { get; set; } = 800;
    [Parameter] public int InitHeight { get; set; } = 400;

    public string NFTTextMarkuptext => Markdig.Markdown.ToHtml(Text ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());

    Panzoom? _panzoom;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (this.JS is not null)
        {
            if (firstRender)
                await this.JS.InvokeVoidAsync("mindMapper.MermaidInitialize");
            await this.JS.InvokeVoidAsync("mindMapper.MermaidRender");
        }
    }

    public async Task LoadText(string text)
    {
        if (string.IsNullOrEmpty(text)) return;

        Text = mindMapper.MermaidWrappedText(text);
        await InvokeAsync(StateHasChanged);
    }

    async Task OnResetClick(MouseEventArgs args)
    {
        if (_panzoom != null)
            await _panzoom.ResetAsync();
    }

    async Task OnWheel(CustomWheelEventArgs args)
    {
        if (!args.ShiftKey)
            return;
        if (_panzoom != null)
            await _panzoom.ZoomWithWheelAsync(args);
    }

}
